.container-loader {
  animation: disappear 6s forwards;
  // background-image: url("https://www.pexels.com/fr-fr/photo/voie-lactee-la-nuit-2113554/");
  // la taille des images d'arrière-plan pour l'élément. La taille de l'image peut être contrainte, complètement ou partiellement afin de conserver ses proportions.
  background-size: cover;
  width: 100%;
  height: 100%;
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  background-image: linear-gradient(0deg, rgba(147, 86, 220, 1) 1%, rgba(255, 121, 218, 1) 100%);


  .loader-homepage {
    margin: 0;
    height: 127vh;
    width: 100%;
    // height:100%;
    display: flex;
    align-items: center;
    justify-content: center;
    //  définit comment gérer le dépassement du contenu d'un élément dans son bloc. Elle définit les valeurs des propriétés overflow-x et overflow-y.
    overflow: hidden;

    // position: relative;

    // .overlay{
    //   position:absolute;
    //   height:100%;
    //   width: 100%;
    //   top:0;
    //   left:0;
    //   background-color: rgba(0,0,0,0.5);
    // }


    .loader {
      // z-index: 1;
      position: relative;
      font-family: "Shrikhand", "sans-serif";
      font-size: 34px;
      font-style: italic;
      font-weight: 900;
      line-height: 44px;
      letter-spacing: 0em;
      text-align: center;
      color: $black;
      // font-size: 1.5em;
      display: flex;
      justify-content: center;
      align-items: center;
      text-align: center;
      width: 100%;
      height: 100%;
      animation: change-color 10s;
      // linear infinite;
      // animation-duration: 3s;

      .tracking-in-contract-bck-top {
        animation: tracking-in-contract-bck-top 5s cubic-bezier(0.215, 0.610, 0.355, 1.000) 3 both;
      }

      // définir les étapes qui composent la séquence d'une animation CSS. Cela permet de contrôler une animation plus finement que ce qu'on pourrait obtenir avec les transitions.
      @keyframes tracking-in-contract-bck-top {
        0% {
          letter-spacing: 1em;
          transform: translateZ(400px) translateY(-300px);
          opacity: 0;
        }

        40% {
          opacity: 0.6;
        }

        100% {
          transform: translateZ(0) translateY(0);
          opacity: 1;
        }
      }

      @keyframes change-color {
        to {
          // permet d'appliquer des filtres et d'obtenir des effets
          //  graphiques de flou, de saturation, etc.
          filter: hue-rotate(8turn);
        }
      }

      .loading {
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;

      }
    }
  }
}

@keyframes disappear {
  0% {
    opacity: 1;
    // L'unité de longueur CSS vh est relative à la hauteur du bloc conteneur initial. L'unité vh Css est égale à 1% de cette dernière.
    // L'unité CSS vh a été introduite en CSS3 (*), pose des problèmes d'interprétation.

    // La valeur de viewport height semble être basée sur window.innerHeight, elle est donc variable suivant la taille de la fenêtre du navigateur.
    // Exemple dynamique : 3x(1024/100) = 307px

    // Il n'existe pas de règle, l'unité vh Css sera plus utilisée pour les tailles de blocs tel que width ou height.

    height: 100vh;
    display: flex;
  }

  100% {
    opacity: 0;
    height: 0;
    display: none;
  }


}